Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
Counts1 = Counts1[c(IncludeBio,IncludeTech),]
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/apply(NonZero[!Tech,], 1, sum) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/apply(NonZero[Tech,], 1, sum) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
Counts = cbind(Counts1,Counts2)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
library(BASiCS)
BASiCS_Filter_new <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>0 & apply(Counts[Tech,],2,sum)>0, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
Counts1 = Counts1[c(IncludeBio,IncludeTech),]
Tech = Tech[c(IncludeBio,IncludeTech)]
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/apply(NonZero[!Tech,], 1, sum) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/apply(NonZero[Tech,], 1, sum) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
Counts = cbind(Counts1,Counts2)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
BatchInfo = rep(c(1,2), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
1/0
1/0 >5
library(BASiCS)
BASiCS_Filter_new <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>0 & apply(Counts[Tech,],2,sum)>0, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
#Counts1 = Counts1[c(IncludeBio,IncludeTech),]
#Tech = Tech[c(IncludeBio,IncludeTech)]
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/(1+apply(NonZero[!Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/(1+apply(NonZero[Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
Counts = cbind(Counts1,Counts2)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
BatchInfo = rep(c(1,2), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 40000, Thin = 5, Burn = 20000, PrintProgress = FALSE)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 4000, Thin = 5, Burn = 2000, PrintProgress = TRUE)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 4000, Thin = 5, Burn = 2000, PrintProgress = TRUE)
library(BASiCS)
BASiCS_Filter <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>0 & apply(Counts[Tech,],2,sum)>0, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/(1+apply(NonZero[!Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/(1+apply(NonZero[Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
Counts = cbind(Counts1,Counts2)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 0)
BatchInfo = rep(c(1,2), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 4000, Thin = 5, Burn = 2000, PrintProgress = TRUE)
DenoisedCounts = BASiCS_DenoisedCounts(Data = FilterData, Chain = MCMC_Output)
write.csv(DenoisedCounts,'/Users/luyi/data/clone_split/denoised_ILSGR.csv')
library(BASiCS)
BASiCS_Filter_new <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>0 & apply(Counts[Tech,],2,sum)>0, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/(1+apply(NonZero[!Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/(1+apply(NonZero[Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
Counts = cbind(Counts1,Counts2)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 0.1)
BatchInfo = rep(c(1,2), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 50000, Thin = 10, Burn = 20000, PrintProgress = TRUE)
DenoisedCounts = BASiCS_DenoisedCounts(Data = FilterData, Chain = MCMC_Output)
write.csv(DenoisedCounts,'/Users/luyi/data/clone_split/denoised_ILSGR_new.csv')
install.packages("CCA")
DenoisedCounts[2872]
DenoisedCounts[2872,]
DenoisedCounts[2873,]
library(BASiCS)
BASiCS_Filter_new <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>0 & apply(Counts[Tech,],2,sum)>0, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/(1+apply(NonZero[!Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/(1+apply(NonZero[Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
Counts = cbind(Counts1,Counts2)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 0.1)
BatchInfo = rep(c(1,2), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 80000, Thin = 10, Burn = 30000, PrintProgress = TRUE)
DenoisedCounts = BASiCS_DenoisedCounts(Data = FilterData, Chain = MCMC_Output)
write.csv(DenoisedCounts,'/Users/luyi/data/clone_split/denoised_ILSGR.csv')
library(BASiCS)
BASiCS_Filter_new <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>0 & apply(Counts[Tech,],2,sum)>0, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/(1+apply(NonZero[!Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/(1+apply(NonZero[Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/counts.rda")
Counts3 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
Counts = cbind(Counts1,Counts2,Counts3)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 5, MinAvCountsPerCellsWithExpression = 0.5)
BatchInfo = rep(c(1,2,3,4), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 80000, Thin = 10, Burn = 30000, PrintProgress = TRUE)
library(BASiCS)
BASiCS_Filter_new <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>0 & apply(Counts[Tech,],2,sum)>0, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/(1+apply(NonZero[!Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/(1+apply(NonZero[Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/counts.rda")
Counts3 = rbind(fc$counts, fcercc$counts)
Counts = cbind(Counts1,Counts2,Counts3)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 5, MinAvCountsPerCellsWithExpression = 0.5)
BatchInfo = rep(c(1,2,3,4), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 80000, Thin = 10, Burn = 30000, PrintProgress = TRUE)
DenoisedCounts = BASiCS_DenoisedCounts(Data = FilterData, Chain = MCMC_Output)
write.csv(DenoisedCounts,'/Users/luyi/data/clone_split/denoised_ILSGR_4samples.csv')
library(BASiCS)
BASiCS_Filter_new <- function(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 2, MinTotalCountsPerGene = 2,
MinCellsWithExpression = 2, MinAvCountsPerCellsWithExpression = 2)
{
q = length(Tech)
q.bio = q - sum(SpikeInput)
n = ncol(Counts)
CellIndex = 1:n
GeneIndex = 1:q
# Remove cells with zero counts in either biological or technical genes
IncludeCells = ifelse(apply(Counts[!Tech,],2,sum)>20 & apply(Counts[Tech,],2,sum)>20, T, F)
if(sum(IncludeCells) == 0) stop('All cells have zero biological or technical counts (across all transcripts) \n')
IncludeCells = ifelse(apply(Counts,2,sum) >= MinTotalCountsPerCell, IncludeCells, F)
Counts1 = Counts[,IncludeCells]
# Remove transcripts with zero counts across all cells
IncludeBio = ifelse(apply(Counts1[!Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
IncludeTech = ifelse(apply(Counts1[Tech,],1,sum) >= MinTotalCountsPerGene, T, F)
# Remove transcripts expressed in less than 'MinExpressedCells' cells
NonZero <- I(Counts1>0)
IncludeBio = ifelse(apply(NonZero[!Tech,], 1, sum) >= MinCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(NonZero[Tech,], 1, sum) >= MinCellsWithExpression, IncludeTech, F)
# Remove transcripts with low counts in the cells where they are expressed
IncludeBio = ifelse(apply(Counts1[!Tech,], 1, sum)/(1+apply(NonZero[!Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeBio, F)
IncludeTech = ifelse(apply(Counts1[Tech,], 1, sum)/(1+apply(NonZero[Tech,], 1, sum)) >= MinAvCountsPerCellsWithExpression, IncludeTech, F)
list("Counts" = Counts1[c(IncludeBio,IncludeTech),], "Tech" = Tech[c(IncludeBio,IncludeTech)],
"SpikeInput" = SpikeInput[IncludeTech],
"IncludeGenes" = c(IncludeBio,IncludeTech), "IncludeCells" = IncludeCells)
}
load("~/Downloads/ILSGR0260r_counts.rda")
Counts1 = rbind(fc$counts, fcercc$counts)
SpikeInput = fcercc$anno$concentration.in.Mix.1/10
Tech = c(rep(FALSE,dim(fc$counts)[1]),rep(TRUE,dim(fcercc$counts)[1]))
rm(fc)
rm(fcercc)
load("~/Downloads/JS86_CELSEQ_counts.rda")
Counts2 = rbind(fc$counts, fcercc$counts)
rm(fc)
rm(fcercc)
load("~/Downloads/counts.rda")
Counts3 = rbind(fc$counts, fcercc$counts)
Counts = cbind(Counts1,Counts2,Counts3)
Filter = BASiCS_Filter_new(Counts, Tech, SpikeInput,
MinTotalCountsPerCell = 1000, MinTotalCountsPerGene = 100,
MinCellsWithExpression = 5, MinAvCountsPerCellsWithExpression = 0.5)
BatchInfo = rep(c(1,2,3,4), each = 40)
BatchInfo = BatchInfo[Filter$IncludeCells]
FilterData = newBASiCS_Data(Filter$Counts, Filter$Tech, Filter$SpikeInput,BatchInfo=BatchInfo)
MCMC_Output <- BASiCS_MCMC(FilterData, N = 80000, Thin = 10, Burn = 30000, PrintProgress = TRUE)
DenoisedCounts = BASiCS_DenoisedCounts(Data = FilterData, Chain = MCMC_Output)
write.csv(DenoisedCounts,'/Users/luyi/data/clone_split/denoised_ILSGR_4samples.csv')
colname(Counts3)
colnames(Counts3)
View(Counts3)
View(Counts3)
View(Counts2)
View(Counts2)
a = fcercc$counts
View(a)
View(a)
colnames(Filter$Counts)
fc$stat$Status
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("~/git/Coursera")
author("Dev_data_project")
library(slidify)
author("Dev_data_project")
install.packages("shiny")
library(shiny)
library(ggplot2)
library(Cairo)   # For nicer ggplot2 output when deployed on Linux
# We'll use a subset of the mtcars data set, with fewer columns
# so that it prints nicely
mtcars2 <- mtcars[, c("mpg", "cyl", "disp", "hp", "wt", "am", "gear")]
ui <- fluidPage(
fluidRow(
column(width = 4,
plotOutput("plot1", height = 300,
# Equivalent to: click = clickOpts(id = "plot_click")
click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)
)
)
),
fluidRow(
column(width = 6,
h4("Points near click"),
verbatimTextOutput("click_info")
),
column(width = 6,
h4("Brushed points"),
verbatimTextOutput("brush_info")
)
)
)
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars2, aes(wt, mpg)) + geom_point()
})
output$click_info <- renderPrint({
# Because it's a ggplot2, we don't need to supply xvar or yvar; if this
# were a base graphics plot, we'd need those.
nearPoints(mtcars2, input$plot1_click, addDist = TRUE)
})
output$brush_info <- renderPrint({
brushedPoints(mtcars2, input$plot1_brush)
})
}
shinyApp(ui, server)
---
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
knit        : slidify::knit2slides
---
## Read-And-Delete
1. Edit YAML front matter
2. Write using R Markdown
3. Use an empty line followed by three dashes to separate slides!
--- .class #id
## Slide 2
setwd("~/git/Coursera/Dev_data_project")
publish(user = "LuyiTian", repo = "Dev_data_project", host = 'github')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
install_version("stringr", version="0.6.2")
slidify("index.Rmd")
